#!/usr/bin/env python
# encoding: utf-8
from __future__ import print_function

import os
import re
import sys
import tempfile

if len(sys.argv) != 5:
    print("Syntax: make_skeleton <include file> <function prefix> <source file> <comma separated list of prefixed types>", file=sys.stderr)
    sys.exit(1)

extfile        = sys.argv[1]            # "X11/extensions/Xrandr.h"
prefix         = sys.argv[2]            # XRR
source_file    = sys.argv[3]            # libXrandr.c
prefixed_types = sys.argv[4].split(",") # RRCrtc,RROutput

with tempfile.NamedTemporaryFile(mode="w", suffix='.c') as temp:
    temp.write("#include <%s>" % extfile)
    temp.flush()
    output = os.popen("gcc -E '{}'".format(temp.name)).read()

ccode = open(source_file).read()

print("""
/* This file was automatically generated by ./make_skeleton.py */
#include <%s>
""" % extfile)

functions = re.findall(r"(?m)^(\w+(?:\s*\*+)?)\s*(%s\w+)\s*\(([^)]+)\);" % prefix,
                       output)

for function in functions:
    rettype, name, parameters = function
    parameter_array = re.split("\s*,\s*", parameters)
    call = []
    actions = []
    warning = ""

    for x in parameter_array:
        x = x.split()
        param = x[-1].replace("*", "")
        call.append(param)
        if param != x[-1]:
            if x[0] in prefixed_types:
                warning = ("\033[31mWarning\033[0m: In {name}: parameter "
                    "{param} unhandled").format( name=name, param=" ".join(x))
            continue
        if x[0] in prefixed_types:
            actions.append(
                " {param} = {param} & ~XID_SPLIT_MASK;".format(param=param))

    if re.search("(?<!_){}".format(name), ccode):
        print(("static {ret} (*_{fn})({par_def});\n".format(
            ret=rettype, par_def=", ".join(parameter_array), fn=name)))
        continue

    if warning:
        print(warning, file=sys.stderr)

    if actions:
        actions.append("")
    returnv = "return " if rettype.lower() != "void" else ""
    print(("static {ret} (*_{fn})({par_def});\n"
          "{ret} {fn}({par_def}) {{\n"
          "{actions}"
          "{returnv}_{fn}({par_call});\n"
          "}}\n\n").format(
              ret=rettype,
              fn=name,
              returnv=returnv,
              actions="\n".join(actions),
              par_def=", ".join(parameter_array),
              par_call=", ".join(call)
          ))

defns = []
for function in functions:
    defns.append("_{fn} = dlsym(xrandr_lib, \"{fn}\")".format(fn=function[1]))
print("#define FUNCTION_POINTER_INITIALIZATIONS {defns}".format(
    defns="; ".join(defns)))
