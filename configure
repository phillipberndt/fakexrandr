#!/bin/bash

# 1) Determine xrandr version
IFS="."
XRANDR_VERSION=( $(pkg-config --modversion xrandr) )
if ! [ $? -eq 0 ]; then
	exit 1
fi
echo "XRandR version is ${XRANDR_VERSION[*]}"
unset IFS

# For convenience: Check if Xlib headers are present
pkg-config --exists x11 || exit 1

# 2) Determine path to real xrandr library
REAL_LIBRARY=$(ldd `which xrandr` | sed -nre 's/.+libXrandr.so.+=> ([^ ]+).*/\1/p')
echo "The path to the real XRandR library is ${REAL_LIBRARY}"
if echo "${REAL_LIBRARY}" | grep -q local; then
	echo -e "\033[31mWARNING: \033[0m This looks as if you already have fakexrandr installed?!"
	REAL_LIBRARY=$(find /usr/lib -name libXrandr.so | head -n 1)
	if [ -z ${REAL_LIBRARY} ]; then
		echo "          Aborting: No other candidate was found in /usr/lib"
		exit 1
	fi
	echo "          Using ${REAL_LIBRARY} instead. (Found using \`file')"
fi
REAL_LIBRARY_DIR=$(dirname "${REAL_LIBRARY}")

# 3) Determine location for fake xrandr library
LIBRARY_DIRECTORIES=($(ldconfig -v 2>/dev/null | grep -oE '^/[^:]+'))
FAKE_LIBRARY_DIRECTORY=
CANDIDATES=
for i in `seq ${#LIBRARY_DIRECTORIES[@]}`; do
	if [ "${LIBRARY_DIRECTORIES[$i]}" == "${REAL_LIBRARY_DIR}" ]; then
		break
	fi
	CANDIDATES+="${LIBRARY_DIRECTORIES[$i]}, "
	if echo ${LIBRARY_DIRECTORIES[$i]} | grep -q local; then
		FAKE_LIBRARY_DIRECTORY=${LIBRARY_DIRECTORIES[$i]}
		break
	fi
done
if [ -z "${FAKE_LIBRARY_DIRECTORY}" ]; then
	echo
	echo -e "\033[31mERROR:\033[0m Failed to find a suitable directory for the fakeXrandr library"
	echo
	echo "You must place the library into the library search path, in a directory preceeding"
	echo "${REAL_LIBRARY_DIR}. In your system, this leaves the following candidates:"
	echo $CANDIDATES
	echo "None of these contains \`local', therefore I won't autoconfigure the installation to one"
	echo "of these directories. Either add a high-priority directory in /usr/local using the ldconfig"
	echo "mechanism (See /etc/ld.so.conf.d/ on most systems) or manually create config.h."
	echo
	exit 1
fi
echo "The fake library will be installed to ${FAKE_LIBRARY_DIRECTORY}"

# 4) Determine screen resolution from xrandr utility
WIDTH_AND_HEIGHT=($(
	M=0
	LD_PRELOAD="$REAL_LIBRARY" xrandr | grep -oE "[0-9]+x[0-9]+" | tr 'x' ' ' | while read W H; do
		S=$[$W * $H]
		if [ $S -gt $M ]; then
			M=$S
			echo $W $H
		fi
	done | tail -n 1
))
echo -e "\033[1mMaximal resolution determined as ${WIDTH_AND_HEIGHT[0]}x${WIDTH_AND_HEIGHT[1]}\033[0m"

# 5) Prompt for the number of splits wanted if the value was not provided
if [ -z "$EXTRA_SCREENS" ]; then
	while true; do
		echo -e "\033[1m"
		read -p "How many screen splits do you want? " EXTRA_SCREENS
		case $EXTRA_SCREENS in
			''|*[!0-9]*)
				echo -e "\033[31mInvalid number provided.\033[0m"
				;;
	
			*)
				break;
		esac
	done
fi

let COUNT=$EXTRA_SCREENS+1
let WIDTH=${WIDTH_AND_HEIGHT[0]}/$COUNT
echo
echo -e "\033[1mI will write a file config.h such that when you set your resolution to that resolution,"
echo -e "the monitor is virtually split into $COUNT equal screens of $WIDTH pixels wide.\033[0m"
echo

cat > config.h <<EOF
/* This file was automatically generated by ./configure */

#define XRANDR_MAJOR ${XRANDR_VERSION[0]}
#define XRANDR_MINOR ${XRANDR_VERSION[1]}
#define XRANDR_PATCH ${XRANDR_VERSION[2]}

#define SPLIT_SCREEN_HEIGHT ${WIDTH_AND_HEIGHT[1]}
#define SPLIT_SCREEN_WIDTH  ${WIDTH_AND_HEIGHT[0]}
#define EXTRA_SCREENS ${EXTRA_SCREENS}
#define REAL_XRANDR_LIB "${REAL_LIBRARY}"
#define FAKEXRANDR_INSTALL_DIR "${FAKE_LIBRARY_DIRECTORY}"
EOF

exit 0
